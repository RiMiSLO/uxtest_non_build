#include <iostream>
#include "message.h"
#include <string.h>
#include <QString>
#include <vector>
#include <iostream>



#ifndef SNMPMESS_H
#define SNMPMESS_H


#define IP_MASK_FORMAT       "192.168.%d.255"
#define IP_MASK_FORMAT_SNMP  "192.168.%d.%d"
#define IP_MASK_FORMAT_WIN   "192.168.%d.%d"

#define UPS_BATTERY_ERROR    " Низкий заряд баттареи ИБП; "
#define UPS_STATUS_ERROR     " Ошибка статуса ИБП; "
#define UPS_IN_VOLT_ERROR    " Нестабильное входное напряжение ИБП; "
#define UPS_OUT_ERROR        " Нестабильное выходное напряжение ИБП; "
#define UPS_ANY_STATUS_ERROR " Ошибка состояния ИБП; "




#ifdef  SNMP_IMPLEMENT
#define SNMP_EXT
#define SNMP_EXT_INIT( dec, init ) \
    dec = init
#else
#define SNMP_EXT extern
#define SNMP_EXT_INIT( dec, init ) \
    extern dec
#endif

static std::string oidznach1;
static std::string oidznach2;
static std::string oidznach3;
static int oidznachint;
static int oidznachint1;
static int oidznachint2;
static int oidznachint3;
static int oidznachint4;
static int oidznachint5;
static char ini_addr_ups1[32];
static int socketUps;
static char RecvBuf[1024];
static QString snmpErrorBuf;
static int snmpErrorMass[2048];
static int snmpClickreact;





//           static char snmpSendMess1[42]=   // 104
//           {
//            0x30, 0x28, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
//            0x63, char(0xa0), 0x1b, 0x02, 0x02, 0x08, char(0xe3), 0x02, 0x01, 0x00,
//            0x02, 0x01,0x00, 0x30, 0x0f, 0x30, 0x0d, 0x06, 0x09, 0x2b, 0x06, 0x01,
//            0x02, 0x01, 0x19,0x02, 0x02, 0x00, 0x05, 0x00
//           };
//           static char snmpSendMess[41]=   //98304
//           {
//           0x30, 0x27, 0x02, 0x01, 0x00, 0x04,0x06, 0x70, 0x75, 0x62, 0x6c,
//           0x69, 0x63, char(0xa0), 0x1a, 0x02, 0x02, 0x0c,char(0xed), 0x02,
//           0x01, 0x00,0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x08,
//           0x2b, 0x06, 0x01, 0x02, 0x01, 0x01, 0x07,0x00, 0x05, 0x00
//           };
//          static char snmpSendMess0[40]=    // room 603
//           {
//           0x30, 0x26, 0x02, 0x01, 0x00, 0x04,0x06, 0x70, 0x75, 0x62,
//           0x6c,0x69, 0x63, char(0xa0), 0x19, 0x02, 0x01, 0x59, 0x02,
//           0x01, 0x00,0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06,
//           0x08, 0x2b, 0x06, 0x01, 0x02, 0x01, 0x01, 0x06,0x00, 0x05,
//           0x00
//           };
//          static char snmpSendMess2[41]=   //name
//           { 0x30, 0x26, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
//             (char) 0xa0, 0x19, 0x02, 0x01, 0x42, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30,
//             0x0e, 0x30, 0x0c, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00,
//             0x05, 0x00
//           };
//          static char snmpSendMess3[43]=           // lan card info
//           {0x30, 0x29, 0x02, 0x01, 0x00, 0x04,
//            0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, char(0xa0), 0x1c, 0x02,
//            0x02, 0x02, 0x39, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x10,
//            0x30, 0x0e, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x02, 0x01, 0x02, 0x02,
//            0x01, 0x02, 0x01, 0x05, 0x00 };

          static char upsLoadPower[47]=
          {0x30, 0x2d, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
           0x63, (char)0xa0, 0x20, 0x02, 0x02, 0x0b, (char)0x93, 0x02, 0x01, 0x00,
           0x02, 0x01, 0x00, 0x30, 0x14, 0x30, 0x12, 0x06, 0x0e, 0x2b, 0x06, 0x01,
           0x04, 0x01, (char)0x9d, 0x60, 0x01, 0x01, 0x01, 0x01, 0x02, 0x07, 0x00, 0x05, 0x00};


          static char upsBatStatus[47]=
          {0x30, 0x2d, 0x02, 0x01, 0x00, 0x04,
          0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, (char)0xa0, 0x20, 0x02,
          0x02, 0x0b, (char)0x95, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x14,
          0x30, 0x12, 0x06, 0x0e, 0x2b, 0x06, 0x01, 0x04, 0x01, (char)0x9d,
          0x60, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x00, 0x05, 0x00};

          static char upsCapacity[47]=
          { 0x30, 0x2d, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c,
            0x69, 0x63, (char)0xa0, 0x20, 0x02, 0x02, 0x0b, (char)0x96, 0x02, 0x01, 0x00,
            0x02, 0x01, 0x00, 0x30, 0x14, 0x30, 0x12, 0x06, 0x0e, 0x2b, 0x06,
            0x01, 0x04, 0x01, (char)0x9d, 0x60, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01, 0x00, 0x05, 0x00};

          static char upsInputeVoltage[47]=
          {0x30, 0x2d, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
           0x63, (char)0xa0, 0x20, 0x02, 0x02, 0x00, (char)0xe2, 0x02, 0x01, 0x00, 0x02, 0x01,
           0x00, 0x30, 0x14, 0x30, 0x12, 0x06, 0x0e, 0x2b, 0x06,0x01, 0x04, 0x01,
           (char)0x9d, 0x60, 0x01, 0x01, 0x01, 0x03, 0x02, 0x01, 0x00, 0x05, 0x00 };


          static char upsOutputStatus[47]=
          {0x30, 0x2d, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
           0x63, (char)0xa0, 0x20, 0x02, 0x02, 0x03, (char)0xfc, 0x02, 0x01, 0x00,
           0x02, 0x01, 0x00, 0x30, 0x14, 0x30, 0x12, 0x06, 0x0e, 0x2b, 0x06, 0x01,
           0x04, 0x01, (char)0x9d, 0x60, 0x01, 0x01, 0x01, 0x04, 0x01, 0x01, 0x00, 0x05, 0x00
          };



    //MESSAGE_REMOTE static snmp_message;




class snmpmess
{

public:
    snmpmess();

};
std::string reciveSNMPstring(char sendMess[], int sendMessSize, char ipaddr[32]);

int reciveSNMPint(char sendMess[], int sendMessSize, char ipaddr[32]);

void snmp_server_open_sock();
void snmp_open_sock(char ipaddr[32]);
void snmp_sendmess(char sendMess[], int sendMessSize, int socketrecv);
int snmp_recvmess(int socketrecv);
void check_snmp_error(uint var);
void snmp_button();

//void snmpmess_uninit(void);

//int snmpmess_init();

//SNMP_EXT_INIT( pthread_mutex_t SNMP_t_mutex, PTHREAD_MUTEX_INITIALIZER );
#endif
